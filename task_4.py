"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    max_3 = max(array, key=array.count)
    count = array.count(max_3)
    return f'Чаще всего встречается число {max_3}, ' \
           f'оно появилось в массиве {count} раз(а)'


print(timeit("func_1()", globals=globals(), number=90000))
print(timeit("func_2()", globals=globals(), number=90000))
print(timeit("func_3()", globals=globals(), number=90000))


# func_1 (0.1750467370000024) Время работы функции не оптимально быстрое из-за наличия цикла for
# func_2 (0.1352701120000006) Более оптимальный вариант, поскольку хоть и присутствует цикл, но встроенная функция max
# ускоряет работы функции
# func_3 (0.09717771100002892) Применение только встроенной функции без циклов не намного, но ускоряет работу.
# В данном примере func_3 показала более оптимальный и лаконичный вариант решения

